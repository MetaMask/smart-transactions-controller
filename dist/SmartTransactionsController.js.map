{"version":3,"file":"SmartTransactionsController.js","sourceRoot":"","sources":["../src/SmartTransactionsController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseConfig,\n  BaseController,\n  BaseState,\n  NetworkState,\n  util,\n} from '@metamask/controllers';\nimport { BigNumber } from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport mapValues from 'lodash/mapValues';\nimport cloneDeep from 'lodash/cloneDeep';\nimport {\n  APIType,\n  SmartTransaction,\n  SignedTransaction,\n  SignedCanceledTransaction,\n  UnsignedTransaction,\n  SmartTransactionsStatus,\n  SmartTransactionStatuses,\n  Fees,\n  EstimatedGas,\n} from './types';\nimport {\n  getAPIRequestURL,\n  isSmartTransactionPending,\n  calculateStatus,\n  snapshotFromTxMeta,\n  replayHistory,\n  generateHistoryEntry,\n  getStxProcessingTime,\n  handleFetch,\n} from './utils';\nimport { CHAIN_IDS } from './constants';\n\nconst { safelyExecute } = util;\n\n// TODO: JSDoc all methods\n// TODO: Remove all comments (* ! ?)\nconst SECOND = 1000;\nconst MINUTE = SECOND * 60;\n\nexport const DEFAULT_INTERVAL = SECOND * 10;\nexport const CANCELLABLE_INTERVAL = MINUTE;\n\nexport interface SmartTransactionsControllerConfig extends BaseConfig {\n  interval: number;\n  clientId: string;\n  chainId: string;\n  supportedChainIds: string[];\n}\n\nexport interface SmartTransactionsControllerState extends BaseState {\n  smartTransactionsState: {\n    smartTransactions: Record<string, SmartTransaction[]>;\n    userOptIn: boolean | undefined;\n    liveness: boolean | undefined;\n    fees: Fees | undefined;\n    estimatedGas: {\n      txData: EstimatedGas | undefined;\n      approvalTxData: EstimatedGas | undefined;\n    };\n  };\n}\n\nexport default class SmartTransactionsController extends BaseController<\n  SmartTransactionsControllerConfig,\n  SmartTransactionsControllerState\n> {\n  public timeoutHandle?: NodeJS.Timeout;\n\n  private getNonceLock: any;\n\n  private getNetwork: any;\n\n  public ethersProvider: any;\n\n  public txController: any;\n\n  private trackMetaMetricsEvent: any;\n\n  /* istanbul ignore next */\n  private async fetch(request: string, options?: RequestInit) {\n    const { clientId } = this.config;\n    const fetchOptions = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(clientId && { 'X-Client-Id': clientId }),\n      },\n    };\n\n    return handleFetch(request, fetchOptions);\n  }\n\n  constructor(\n    {\n      onNetworkStateChange,\n      getNonceLock,\n      getNetwork,\n      provider,\n      txController,\n      trackMetaMetricsEvent,\n    }: {\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getNonceLock: any;\n      getNetwork: any;\n      provider: any;\n      txController: any;\n      trackMetaMetricsEvent: any;\n    },\n    config?: Partial<SmartTransactionsControllerConfig>,\n    state?: Partial<SmartTransactionsControllerState>,\n  ) {\n    super(config, state);\n\n    this.defaultConfig = {\n      interval: DEFAULT_INTERVAL,\n      chainId: CHAIN_IDS.ETHEREUM,\n      clientId: 'default',\n      supportedChainIds: [CHAIN_IDS.ETHEREUM, CHAIN_IDS.RINKEBY],\n    };\n\n    this.defaultState = {\n      smartTransactionsState: {\n        smartTransactions: {},\n        userOptIn: undefined,\n        fees: undefined,\n        liveness: true,\n        estimatedGas: {\n          txData: undefined,\n          approvalTxData: undefined,\n        },\n      },\n    };\n\n    this.getNonceLock = getNonceLock;\n    this.getNetwork = getNetwork;\n    this.ethersProvider = new ethers.providers.Web3Provider(provider);\n    this.txController = txController;\n    this.trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    this.initialize();\n    this.initializeSmartTransactionsForChainId();\n\n    onNetworkStateChange(({ provider: newProvider }) => {\n      const { chainId } = newProvider;\n      this.configure({ chainId });\n      this.initializeSmartTransactionsForChainId();\n      this.checkPoll(this.state);\n      this.ethersProvider = new ethers.providers.Web3Provider(provider);\n    });\n\n    this.subscribe((currentState: any) => this.checkPoll(currentState));\n  }\n\n  checkPoll(state: any) {\n    const { smartTransactions } = state.smartTransactionsState;\n    const currentSmartTransactions = smartTransactions[this.config.chainId];\n    const pendingTransactions = currentSmartTransactions?.filter(\n      isSmartTransactionPending,\n    );\n    if (!this.timeoutHandle && pendingTransactions?.length > 0) {\n      this.poll();\n    } else if (this.timeoutHandle && pendingTransactions?.length === 0) {\n      this.stop();\n    }\n  }\n\n  initializeSmartTransactionsForChainId() {\n    if (this.config.supportedChainIds.includes(this.config.chainId)) {\n      const { smartTransactionsState } = this.state;\n      this.update({\n        smartTransactionsState: {\n          ...smartTransactionsState,\n          smartTransactions: {\n            ...smartTransactionsState.smartTransactions,\n            [this.config.chainId]:\n              smartTransactionsState.smartTransactions[this.config.chainId] ??\n              [],\n          },\n        },\n      });\n    }\n  }\n\n  async poll(interval?: number): Promise<void> {\n    const { chainId, supportedChainIds } = this.config;\n    interval && this.configure({ interval }, false, false);\n    this.timeoutHandle && clearInterval(this.timeoutHandle);\n    if (!supportedChainIds.includes(chainId)) {\n      return;\n    }\n    await safelyExecute(() => this.updateSmartTransactions());\n    this.timeoutHandle = setInterval(() => {\n      safelyExecute(() => this.updateSmartTransactions());\n    }, this.config.interval);\n  }\n\n  async stop() {\n    this.timeoutHandle && clearInterval(this.timeoutHandle);\n    this.timeoutHandle = undefined;\n  }\n\n  setOptInState(state: boolean | undefined): void {\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        userOptIn: state,\n      },\n    });\n  }\n\n  trackStxStatusChange(\n    smartTransaction: SmartTransaction,\n    prevSmartTransaction?: SmartTransaction,\n  ) {\n    if (!prevSmartTransaction) {\n      return; // Don't track the first STX, because it doesn't have all necessary params.\n    }\n\n    let updatedSmartTransaction = cloneDeep(smartTransaction);\n    updatedSmartTransaction = {\n      ...cloneDeep(prevSmartTransaction),\n      ...updatedSmartTransaction,\n    };\n\n    if (\n      !updatedSmartTransaction.swapMetaData ||\n      (updatedSmartTransaction.status === prevSmartTransaction.status &&\n        prevSmartTransaction.swapMetaData)\n    ) {\n      return; // If status hasn't changed, don't track it again.\n    }\n\n    const sensitiveProperties = {\n      stx_status: updatedSmartTransaction.status,\n      token_from_address: updatedSmartTransaction.txParams?.from,\n      token_from_symbol: updatedSmartTransaction.sourceTokenSymbol,\n      token_to_address: updatedSmartTransaction.txParams?.to,\n      token_to_symbol: updatedSmartTransaction.destinationTokenSymbol,\n      processing_time: getStxProcessingTime(updatedSmartTransaction.time),\n      stx_enabled: true,\n      stx_user_opt_in: true,\n    };\n\n    this.trackMetaMetricsEvent({\n      event: 'STX Status Updated',\n      category: 'swaps',\n      sensitiveProperties,\n    });\n  }\n\n  isNewSmartTransaction(smartTransactionUuid: string): boolean {\n    const { chainId } = this.config;\n    const { smartTransactionsState } = this.state;\n    const { smartTransactions } = smartTransactionsState;\n    const currentSmartTransactions = smartTransactions[chainId];\n    const currentIndex = currentSmartTransactions?.findIndex(\n      (stx) => stx.uuid === smartTransactionUuid,\n    );\n    return currentIndex === -1 || currentIndex === undefined;\n  }\n\n  updateSmartTransaction(smartTransaction: SmartTransaction): void {\n    const { chainId } = this.config;\n    const { smartTransactionsState } = this.state;\n    const { smartTransactions } = smartTransactionsState;\n    const currentSmartTransactions = smartTransactions[chainId];\n    const currentIndex = currentSmartTransactions?.findIndex(\n      (stx) => stx.uuid === smartTransaction.uuid,\n    );\n    const isNewSmartTransaction = this.isNewSmartTransaction(\n      smartTransaction.uuid,\n    );\n    this.trackStxStatusChange(\n      smartTransaction,\n      isNewSmartTransaction\n        ? undefined\n        : currentSmartTransactions[currentIndex],\n    );\n\n    if (isNewSmartTransaction) {\n      // add smart transaction\n      const cancelledNonceIndex = currentSmartTransactions.findIndex(\n        (stx: SmartTransaction) =>\n          stx.txParams?.nonce === smartTransaction.txParams?.nonce &&\n          stx.status?.startsWith('cancelled'),\n      );\n      const snapshot = cloneDeep(smartTransaction);\n      const history = [snapshot];\n      const historifiedSmartTransaction = { ...smartTransaction, history };\n      const nextSmartTransactions =\n        cancelledNonceIndex > -1\n          ? currentSmartTransactions\n              .slice(0, cancelledNonceIndex)\n              .concat(currentSmartTransactions.slice(cancelledNonceIndex + 1))\n              .concat(historifiedSmartTransaction)\n          : currentSmartTransactions.concat(historifiedSmartTransaction);\n      this.update({\n        smartTransactionsState: {\n          ...smartTransactionsState,\n          smartTransactions: {\n            ...smartTransactionsState.smartTransactions,\n            [chainId]: nextSmartTransactions,\n          },\n        },\n      });\n      return;\n    }\n\n    if (\n      (smartTransaction.status === SmartTransactionStatuses.SUCCESS ||\n        smartTransaction.status === SmartTransactionStatuses.REVERTED) &&\n      !smartTransaction.confirmed\n    ) {\n      // confirm smart transaction\n      const currentSmartTransaction = currentSmartTransactions[currentIndex];\n      const nextSmartTransaction = {\n        ...currentSmartTransaction,\n        ...smartTransaction,\n      };\n      this.confirmSmartTransaction(nextSmartTransaction);\n    }\n\n    this.update({\n      smartTransactionsState: {\n        ...smartTransactionsState,\n        smartTransactions: {\n          ...smartTransactionsState.smartTransactions,\n          [chainId]: smartTransactionsState.smartTransactions[chainId].map(\n            (item, index) => {\n              return index === currentIndex\n                ? { ...item, ...smartTransaction }\n                : item;\n            },\n          ),\n        },\n      },\n    });\n  }\n\n  async updateSmartTransactions() {\n    const { smartTransactions } = this.state.smartTransactionsState;\n    const { chainId } = this.config;\n\n    const currentSmartTransactions = smartTransactions?.[chainId];\n\n    const transactionsToUpdate: string[] = currentSmartTransactions\n      .filter(isSmartTransactionPending)\n      .map((smartTransaction) => smartTransaction.uuid);\n\n    if (transactionsToUpdate.length > 0) {\n      this.fetchSmartTransactionsStatus(transactionsToUpdate);\n    }\n  }\n\n  async confirmSmartTransaction(smartTransaction: SmartTransaction) {\n    const txHash = smartTransaction.statusMetadata?.minedHash;\n    try {\n      const transactionReceipt = await this.ethersProvider.getTransactionReceipt(\n        txHash,\n      );\n      const transaction = await this.ethersProvider.getTransaction(txHash);\n      const maxFeePerGas = transaction.maxFeePerGas?.toHexString();\n      const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas?.toHexString();\n      if (transactionReceipt?.blockNumber) {\n        const blockData = await this.ethersProvider.getBlock(\n          transactionReceipt?.blockNumber,\n          false,\n        );\n        const baseFeePerGas = blockData?.baseFeePerGas.toHexString();\n        const txReceipt = mapValues(transactionReceipt, (value) => {\n          if (value instanceof ethers.BigNumber) {\n            return value.toHexString();\n          }\n          return value;\n        });\n        const updatedTxParams = {\n          ...smartTransaction.txParams,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n        };\n        // call confirmExternalTransaction\n        const originalTxMeta = {\n          ...smartTransaction,\n          id: smartTransaction.uuid,\n          status: 'confirmed',\n          hash: txHash,\n          txParams: updatedTxParams,\n        };\n        // create txMeta snapshot for history\n        const snapshot = snapshotFromTxMeta(originalTxMeta);\n        // recover previous tx state obj\n        const previousState = replayHistory(originalTxMeta.history);\n        // generate history entry and add to history\n        const entry = generateHistoryEntry(\n          previousState,\n          snapshot,\n          'txStateManager: setting status to confirmed',\n        );\n        const txMeta =\n          entry.length > 0\n            ? {\n                ...originalTxMeta,\n                history: originalTxMeta.history.concat(entry),\n              }\n            : originalTxMeta;\n        this.txController.confirmExternalTransaction(\n          txMeta,\n          txReceipt,\n          baseFeePerGas,\n        );\n\n        this.trackMetaMetricsEvent({\n          event: 'STX Confirmed',\n          category: 'swaps',\n        });\n\n        this.updateSmartTransaction({\n          ...smartTransaction,\n          confirmed: true,\n        });\n      }\n    } catch (e) {\n      this.trackMetaMetricsEvent({\n        event: 'STX Confirmation Failed',\n        category: 'swaps',\n      });\n      console.error('confirm error', e);\n    }\n  }\n\n  // ! Ask backend API to accept list of uuids as params\n  async fetchSmartTransactionsStatus(\n    uuids: string[],\n  ): Promise<SmartTransaction[]> {\n    const { chainId } = this.config;\n\n    const params = new URLSearchParams({\n      uuids: uuids.join(','),\n    });\n\n    const url = `${getAPIRequestURL(\n      APIType.BATCH_STATUS,\n      chainId,\n    )}?${params.toString()}`;\n\n    const data = await this.fetch(url);\n\n    Object.entries(data).forEach(([uuid, smartTransaction]) => {\n      this.updateSmartTransaction({\n        statusMetadata: smartTransaction as SmartTransactionsStatus,\n        status: calculateStatus(smartTransaction as SmartTransactionsStatus),\n        uuid,\n      });\n    });\n\n    return data;\n  }\n\n  async addNonceToTransaction(\n    transaction: UnsignedTransaction,\n  ): Promise<UnsignedTransaction> {\n    const nonceLock = await this.getNonceLock(transaction.from);\n    const nonce = nonceLock.nextNonce;\n    nonceLock.releaseLock();\n    return {\n      ...transaction,\n      nonce: `0x${nonce.toString(16)}`,\n    };\n  }\n\n  async getFees(unsignedTransaction: UnsignedTransaction): Promise<Fees> {\n    const { chainId } = this.config;\n\n    const unsignedTransactionWithNonce = await this.addNonceToTransaction(\n      unsignedTransaction,\n    );\n    const data = await this.fetch(getAPIRequestURL(APIType.GET_FEES, chainId), {\n      method: 'POST',\n      body: JSON.stringify({\n        tx: unsignedTransactionWithNonce,\n      }),\n    });\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        fees: data,\n      },\n    });\n    return data;\n  }\n\n  async estimateGas(\n    unsignedTransaction: UnsignedTransaction,\n    approveTxParams: UnsignedTransaction,\n  ): Promise<EstimatedGas> {\n    const { chainId } = this.config;\n\n    let approvalTxData;\n    if (approveTxParams) {\n      const unsignedApprovalTransactionWithNonce = await this.addNonceToTransaction(\n        approveTxParams,\n      );\n      approvalTxData = await this.fetch(\n        getAPIRequestURL(APIType.ESTIMATE_GAS, chainId),\n        {\n          method: 'POST',\n          body: JSON.stringify({\n            tx: unsignedApprovalTransactionWithNonce,\n          }),\n        },\n      );\n    }\n    const unsignedTransactionWithNonce = await this.addNonceToTransaction(\n      unsignedTransaction,\n    );\n    const data = await this.fetch(\n      getAPIRequestURL(APIType.ESTIMATE_GAS, chainId),\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          tx: unsignedTransactionWithNonce,\n          ...(approveTxParams && { pending_txs: [approveTxParams] }),\n        }),\n      },\n    );\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        estimatedGas: {\n          txData: data,\n          approvalTxData,\n        },\n      },\n    });\n\n    return data;\n  }\n\n  // * After this successful call client must add a nonce representative to\n  // * transaction controller external transactions list\n  async submitSignedTransactions({\n    txParams,\n    signedTransactions,\n    signedCanceledTransactions,\n  }: {\n    signedTransactions: SignedTransaction[];\n    signedCanceledTransactions: SignedCanceledTransaction[];\n    txParams?: any;\n  }) {\n    const { chainId } = this.config;\n    const data = await this.fetch(\n      getAPIRequestURL(APIType.SUBMIT_TRANSACTIONS, chainId),\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          rawTxs: signedTransactions,\n          rawCancelTxs: signedCanceledTransactions,\n        }),\n      },\n    );\n    const time = Date.now();\n    const metamaskNetworkId = this.getNetwork();\n    let preTxBalance;\n    try {\n      const preTxBalanceBN = await this.ethersProvider.getBalance(\n        txParams?.from,\n      );\n      preTxBalance = new BigNumber(preTxBalanceBN.toHexString()).toString(16);\n    } catch (e) {\n      console.error('ethers error', e);\n    }\n    const nonceLock = await this.getNonceLock(txParams?.from);\n    const nonce = ethers.utils.hexlify(nonceLock.nextNonce);\n    if (txParams && !txParams?.nonce) {\n      txParams.nonce = nonce;\n    }\n    const { nonceDetails } = nonceLock;\n\n    this.updateSmartTransaction({\n      chainId,\n      nonceDetails,\n      metamaskNetworkId,\n      preTxBalance,\n      status: SmartTransactionStatuses.PENDING,\n      time,\n      txParams,\n      uuid: data.uuid,\n      cancellable: true,\n    });\n\n    setTimeout(() => {\n      if (!this.isNewSmartTransaction(data.uuid)) {\n        // Only do this for an existing smart transaction. If an STX is not in the list anymore\n        // (e.g. because it was cancelled and a new one was submitted, which deletes the first one),\n        // do not try to update the old one, because it would create a new one with most\n        // of the required STX params missing. It would only have \"uuid\" and \"cancellable\" params.\n        this.updateSmartTransaction({\n          uuid: data.uuid,\n          cancellable: false,\n        });\n      }\n    }, CANCELLABLE_INTERVAL);\n    nonceLock.releaseLock();\n    return data;\n  }\n\n  // ! This should return if the cancellation was on chain or not (for nonce management)\n  // * After this successful call client must update nonce representative\n  // * in transaction controller external transactions list\n  // ! Ask backend API to make this endpoint a POST\n  async cancelSmartTransaction(uuid: string): Promise<void> {\n    const { chainId } = this.config;\n    await this.fetch(getAPIRequestURL(APIType.CANCEL, chainId), {\n      method: 'POST',\n      body: JSON.stringify({ uuid }),\n    });\n\n    this.updateSmartTransaction({\n      uuid,\n      status: SmartTransactionStatuses.CANCELLED_USER_CANCELLED,\n    });\n  }\n\n  async fetchLiveness(): Promise<boolean> {\n    const { chainId } = this.config;\n    let liveness = false;\n    try {\n      const response = await this.fetch(\n        getAPIRequestURL(APIType.LIVENESS, chainId),\n      );\n      liveness = Boolean(response.lastBlock);\n    } catch (e) {\n      console.log('\"fetchLiveness\" API call failed');\n    }\n\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        liveness,\n      },\n    });\n    return liveness;\n  }\n\n  async setStatusRefreshInterval(interval: number): Promise<void> {\n    if (interval !== this.config.interval) {\n      this.configure({ interval }, false, false);\n    }\n  }\n\n  getTransactions({\n    addressFrom,\n    status,\n  }: {\n    addressFrom: string;\n    status: SmartTransactionStatuses;\n  }): SmartTransaction[] {\n    const { smartTransactions } = this.state.smartTransactionsState;\n    const { chainId } = this.config;\n    const currentSmartTransactions = smartTransactions?.[chainId];\n    if (!currentSmartTransactions || currentSmartTransactions.length === 0) {\n      return [];\n    }\n\n    return currentSmartTransactions.filter((stx) => {\n      return stx.status === status && stx.txParams?.from === addressFrom;\n    });\n  }\n}\n"]}