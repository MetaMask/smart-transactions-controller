{"version":3,"file":"SmartTransactionsController.js","sourceRoot":"","sources":["../src/SmartTransactionsController.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-nodejs-modules\nimport { hexlify } from '@ethersproject/bytes';\nimport type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { query, safelyExecute } from '@metamask/controller-utils';\nimport type { Provider } from '@metamask/eth-query';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  NetworkClientId,\n  NetworkController,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingControllerV1 } from '@metamask/polling-controller';\nimport type { TransactionMeta } from '@metamask/transaction-controller';\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { BigNumber } from 'bignumber.js';\n// eslint-disable-next-line import/no-nodejs-modules\nimport EventEmitter from 'events';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport {\n  CHAIN_IDS,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from './constants';\nimport type {\n  Fees,\n  Hex,\n  IndividualTxFees,\n  SignedCanceledTransaction,\n  SignedTransaction,\n  SmartTransaction,\n  SmartTransactionsStatus,\n  UnsignedTransaction,\n  GetTransactionsOptions,\n} from './types';\nimport { APIType, SmartTransactionStatuses } from './types';\nimport {\n  calculateStatus,\n  generateHistoryEntry,\n  getAPIRequestURL,\n  getStxProcessingTime,\n  handleFetch,\n  incrementNonceInHex,\n  isSmartTransactionCancellable,\n  isSmartTransactionPending,\n  replayHistory,\n  snapshotFromTxMeta,\n  getTxHash,\n} from './utils';\n\nconst SECOND = 1000;\nexport const DEFAULT_INTERVAL = SECOND * 5;\nconst ETH_QUERY_ERROR_MSG =\n  '`ethQuery` is not defined on SmartTransactionsController';\n\nexport type SmartTransactionsControllerConfig = BaseConfig & {\n  interval: number;\n  clientId: string;\n  chainId: Hex;\n  supportedChainIds: string[];\n};\n\ntype FeeEstimates = {\n  approvalTxFees: IndividualTxFees | undefined;\n  tradeTxFees: IndividualTxFees | undefined;\n};\n\nexport type SmartTransactionsControllerState = BaseState & {\n  smartTransactionsState: {\n    smartTransactions: Record<Hex, SmartTransaction[]>;\n    userOptIn: boolean | undefined;\n    userOptInV2: boolean | undefined;\n    liveness: boolean | undefined;\n    fees: FeeEstimates;\n    feesByChainId: Record<Hex, FeeEstimates>;\n    livenessByChainId: Record<Hex, boolean>;\n  };\n};\n\nexport default class SmartTransactionsController extends StaticIntervalPollingControllerV1<\n  SmartTransactionsControllerConfig,\n  SmartTransactionsControllerState\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'SmartTransactionsController';\n\n  public timeoutHandle?: NodeJS.Timeout;\n\n  private readonly getNonceLock: any;\n\n  private ethQuery: EthQuery | undefined;\n\n  public confirmExternalTransaction: any;\n\n  public getRegularTransactions: (\n    options?: GetTransactionsOptions,\n  ) => TransactionMeta[];\n\n  private readonly trackMetaMetricsEvent: any;\n\n  public eventEmitter: EventEmitter;\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  /* istanbul ignore next */\n  private async fetch(request: string, options?: RequestInit) {\n    const { clientId } = this.config;\n    const fetchOptions = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(clientId && { 'X-Client-Id': clientId }),\n      },\n    };\n\n    return handleFetch(request, fetchOptions);\n  }\n\n  constructor(\n    {\n      onNetworkStateChange,\n      getNonceLock,\n      provider,\n      confirmExternalTransaction,\n      getTransactions,\n      trackMetaMetricsEvent,\n      getNetworkClientById,\n    }: {\n      onNetworkStateChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getNonceLock: any;\n      provider: Provider;\n      confirmExternalTransaction: any;\n      getTransactions: (options?: GetTransactionsOptions) => TransactionMeta[];\n      trackMetaMetricsEvent: any;\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n    },\n    config?: Partial<SmartTransactionsControllerConfig>,\n    state?: Partial<SmartTransactionsControllerState>,\n  ) {\n    super(config, state);\n\n    this.defaultConfig = {\n      interval: DEFAULT_INTERVAL,\n      chainId: CHAIN_IDS.ETHEREUM,\n      clientId: 'default',\n      supportedChainIds: [CHAIN_IDS.ETHEREUM, CHAIN_IDS.GOERLI],\n    };\n\n    this.defaultState = {\n      smartTransactionsState: {\n        smartTransactions: {},\n        userOptIn: undefined,\n        userOptInV2: undefined,\n        fees: {\n          approvalTxFees: undefined,\n          tradeTxFees: undefined,\n        },\n        liveness: true,\n        livenessByChainId: {\n          [CHAIN_IDS.ETHEREUM]: true,\n          [CHAIN_IDS.GOERLI]: true,\n        },\n        feesByChainId: {\n          [CHAIN_IDS.ETHEREUM]: {\n            approvalTxFees: undefined,\n            tradeTxFees: undefined,\n          },\n          [CHAIN_IDS.GOERLI]: {\n            approvalTxFees: undefined,\n            tradeTxFees: undefined,\n          },\n        },\n      },\n    };\n\n    this.initialize();\n    this.setIntervalLength(this.config.interval);\n    this.getNonceLock = getNonceLock;\n    this.ethQuery = undefined;\n    this.confirmExternalTransaction = confirmExternalTransaction;\n    this.getRegularTransactions = getTransactions;\n    this.trackMetaMetricsEvent = trackMetaMetricsEvent;\n    this.getNetworkClientById = getNetworkClientById;\n\n    this.initializeSmartTransactionsForChainId();\n\n    onNetworkStateChange(({ providerConfig: newProvider }) => {\n      const { chainId } = newProvider;\n      this.configure({ chainId });\n      this.initializeSmartTransactionsForChainId();\n      this.checkPoll(this.state);\n      this.ethQuery = new EthQuery(provider);\n    });\n\n    this.subscribe((currentState: any) => this.checkPoll(currentState));\n    this.eventEmitter = new EventEmitter();\n  }\n\n  async _executePoll(networkClientId: string): Promise<void> {\n    // if this is going to be truly UI driven polling we shouldn't really reach here\n    // with a networkClientId that is not supported, but for now I'll add a check in case\n    // wondering if we should add some kind of predicate to the polling controller to check whether\n    // we should poll or not\n    const chainId = this.#getChainId({ networkClientId });\n    if (!this.config.supportedChainIds.includes(chainId)) {\n      return Promise.resolve();\n    }\n    return this.updateSmartTransactions({ networkClientId });\n  }\n\n  checkPoll(state: any) {\n    const { smartTransactions } = state.smartTransactionsState;\n    const currentSmartTransactions = smartTransactions[this.config.chainId];\n    const pendingTransactions = currentSmartTransactions?.filter(\n      isSmartTransactionPending,\n    );\n    if (!this.timeoutHandle && pendingTransactions?.length > 0) {\n      this.poll();\n    } else if (this.timeoutHandle && pendingTransactions?.length === 0) {\n      this.stop();\n    }\n  }\n\n  initializeSmartTransactionsForChainId() {\n    if (this.config.supportedChainIds.includes(this.config.chainId)) {\n      const { smartTransactionsState } = this.state;\n      this.update({\n        smartTransactionsState: {\n          ...smartTransactionsState,\n          smartTransactions: {\n            ...smartTransactionsState.smartTransactions,\n            [this.config.chainId]:\n              smartTransactionsState.smartTransactions[this.config.chainId] ??\n              [],\n          },\n        },\n      });\n    }\n  }\n\n  async poll(interval?: number): Promise<void> {\n    const { chainId, supportedChainIds } = this.config;\n    interval && this.configure({ interval }, false, false);\n    this.timeoutHandle && clearInterval(this.timeoutHandle);\n    if (!supportedChainIds.includes(chainId)) {\n      return;\n    }\n    await safelyExecute(async () => this.updateSmartTransactions());\n    this.timeoutHandle = setInterval(() => {\n      safelyExecute(async () => this.updateSmartTransactions());\n    }, this.config.interval);\n  }\n\n  async stop() {\n    this.timeoutHandle && clearInterval(this.timeoutHandle);\n    this.timeoutHandle = undefined;\n  }\n\n  setOptInState(state: boolean | undefined): void {\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        userOptInV2: state,\n      },\n    });\n  }\n\n  trackStxStatusChange(\n    smartTransaction: SmartTransaction,\n    prevSmartTransaction?: SmartTransaction,\n  ) {\n    if (!prevSmartTransaction) {\n      return; // Don't track the first STX, because it doesn't have all necessary params.\n    }\n\n    let updatedSmartTransaction = cloneDeep(smartTransaction);\n    updatedSmartTransaction = {\n      ...cloneDeep(prevSmartTransaction),\n      ...updatedSmartTransaction,\n    };\n\n    if (\n      !updatedSmartTransaction.swapMetaData ||\n      (updatedSmartTransaction.status === prevSmartTransaction.status &&\n        prevSmartTransaction.swapMetaData)\n    ) {\n      return; // If status hasn't changed, don't track it again.\n    }\n\n    const sensitiveProperties = {\n      stx_status: updatedSmartTransaction.status,\n      token_from_symbol: updatedSmartTransaction.sourceTokenSymbol,\n      token_to_symbol: updatedSmartTransaction.destinationTokenSymbol,\n      processing_time: getStxProcessingTime(updatedSmartTransaction.time),\n      stx_enabled: true,\n      current_stx_enabled: true,\n      stx_user_opt_in: true,\n    };\n\n    this.trackMetaMetricsEvent({\n      event: MetaMetricsEventName.StxStatusUpdated,\n      category: MetaMetricsEventCategory.Transactions,\n      sensitiveProperties,\n    });\n  }\n\n  isNewSmartTransaction(smartTransactionUuid: string): boolean {\n    const { chainId } = this.config;\n    const { smartTransactionsState } = this.state;\n    const { smartTransactions } = smartTransactionsState;\n    const currentSmartTransactions = smartTransactions[chainId];\n    const currentIndex = currentSmartTransactions?.findIndex(\n      (stx) => stx.uuid === smartTransactionUuid,\n    );\n    return currentIndex === -1 || currentIndex === undefined;\n  }\n\n  updateSmartTransaction(\n    smartTransaction: SmartTransaction,\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ) {\n    let {\n      ethQuery,\n      config: { chainId },\n    } = this;\n    if (networkClientId) {\n      const networkClient = this.getNetworkClientById(networkClientId);\n      chainId = networkClient.configuration.chainId;\n      ethQuery = new EthQuery(networkClient.provider);\n    }\n\n    this.#updateSmartTransaction(smartTransaction, {\n      chainId,\n      ethQuery,\n    });\n  }\n\n  async #updateSmartTransaction(\n    smartTransaction: SmartTransaction,\n    {\n      chainId = this.config.chainId,\n      ethQuery = this.ethQuery,\n    }: {\n      chainId: Hex;\n      ethQuery: EthQuery | undefined;\n    },\n  ): Promise<void> {\n    const { smartTransactionsState } = this.state;\n    const { smartTransactions } = smartTransactionsState;\n    const currentSmartTransactions = smartTransactions[chainId] ?? [];\n    const currentIndex = currentSmartTransactions?.findIndex(\n      (stx) => stx.uuid === smartTransaction.uuid,\n    );\n    const isNewSmartTransaction = this.isNewSmartTransaction(\n      smartTransaction.uuid,\n    );\n    if (this.ethQuery === undefined) {\n      throw new Error(ETH_QUERY_ERROR_MSG);\n    }\n\n    this.trackStxStatusChange(\n      smartTransaction,\n      isNewSmartTransaction\n        ? undefined\n        : currentSmartTransactions[currentIndex],\n    );\n\n    if (isNewSmartTransaction) {\n      // add smart transaction\n      const cancelledNonceIndex = currentSmartTransactions?.findIndex(\n        (stx: SmartTransaction) =>\n          stx.transaction?.nonce === smartTransaction.transaction?.nonce &&\n          stx.status?.startsWith('cancelled'),\n      );\n      const snapshot = cloneDeep(smartTransaction);\n      const history = [snapshot];\n      const historifiedSmartTransaction = { ...smartTransaction, history };\n      const nextSmartTransactions =\n        cancelledNonceIndex > -1\n          ? currentSmartTransactions\n              .slice(0, cancelledNonceIndex)\n              .concat(currentSmartTransactions.slice(cancelledNonceIndex + 1))\n              .concat(historifiedSmartTransaction)\n          : currentSmartTransactions.concat(historifiedSmartTransaction);\n      this.update({\n        smartTransactionsState: {\n          ...smartTransactionsState,\n          smartTransactions: {\n            ...smartTransactionsState.smartTransactions,\n            [chainId]: nextSmartTransactions,\n          },\n        },\n      });\n      return;\n    }\n\n    if (\n      (smartTransaction.status === SmartTransactionStatuses.SUCCESS ||\n        smartTransaction.status === SmartTransactionStatuses.REVERTED) &&\n      !smartTransaction.confirmed\n    ) {\n      // confirm smart transaction\n      const currentSmartTransaction = currentSmartTransactions[currentIndex];\n      const nextSmartTransaction = {\n        ...currentSmartTransaction,\n        ...smartTransaction,\n      };\n      await this.#confirmSmartTransaction(nextSmartTransaction, {\n        chainId,\n        ethQuery,\n      });\n    } else {\n      this.update({\n        smartTransactionsState: {\n          ...smartTransactionsState,\n          smartTransactions: {\n            ...smartTransactionsState.smartTransactions,\n            [chainId]: smartTransactionsState.smartTransactions[chainId].map(\n              (item, index) => {\n                return index === currentIndex\n                  ? { ...item, ...smartTransaction }\n                  : item;\n              },\n            ),\n          },\n        },\n      });\n    }\n\n    this.eventEmitter.emit(\n      `${smartTransaction.uuid}:smartTransaction`,\n      smartTransaction,\n    );\n  }\n\n  async updateSmartTransactions({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    const { smartTransactions } = this.state.smartTransactionsState;\n    const chainId = this.#getChainId({ networkClientId });\n    const smartTransactionsForChainId = smartTransactions[chainId];\n\n    const transactionsToUpdate: string[] = smartTransactionsForChainId\n      .filter(isSmartTransactionPending)\n      .map((smartTransaction) => smartTransaction.uuid);\n\n    if (transactionsToUpdate.length > 0) {\n      this.fetchSmartTransactionsStatus(transactionsToUpdate, {\n        networkClientId,\n      });\n    }\n  }\n\n  #doesTransactionNeedConfirmation(txHash: string | undefined): boolean {\n    if (!txHash) {\n      return true;\n    }\n    const transactions = this.getRegularTransactions();\n    const foundTransaction = transactions?.find((tx) => {\n      return tx.transactionHash?.toLowerCase() === txHash.toLowerCase();\n    });\n    if (!foundTransaction) {\n      return true;\n    }\n    // If a found transaction is either confirmed or submitted, it doesn't need confirmation from the STX controller.\n    // When it's in the submitted state, the TransactionController checks its status and confirms it,\n    // so no need to confirm it again here.\n    return ![TransactionStatus.confirmed, TransactionStatus.submitted].includes(\n      foundTransaction.status,\n    );\n  }\n\n  async #confirmSmartTransaction(\n    smartTransaction: SmartTransaction,\n    {\n      chainId = this.config.chainId,\n      ethQuery = this.ethQuery,\n    }: {\n      chainId: Hex;\n      ethQuery: EthQuery | undefined;\n    },\n  ) {\n    if (ethQuery === undefined) {\n      throw new Error(ETH_QUERY_ERROR_MSG);\n    }\n    const txHash = smartTransaction.statusMetadata?.minedHash;\n    try {\n      const transactionReceipt: {\n        maxFeePerGas?: string;\n        maxPriorityFeePerGas?: string;\n        blockNumber: string;\n      } | null = await query(ethQuery, 'getTransactionReceipt', [txHash]);\n      const transaction: {\n        maxFeePerGas?: string;\n        maxPriorityFeePerGas?: string;\n      } | null = await query(ethQuery, 'getTransactionByHash', [txHash]);\n\n      const maxFeePerGas = transaction?.maxFeePerGas;\n      const maxPriorityFeePerGas = transaction?.maxPriorityFeePerGas;\n      if (transactionReceipt?.blockNumber) {\n        const blockData: { baseFeePerGas?: string } | null = await query(\n          ethQuery,\n          'getBlockByNumber',\n          [transactionReceipt?.blockNumber, false],\n        );\n        const baseFeePerGas = blockData?.baseFeePerGas;\n        const updatedTxParams = {\n          ...smartTransaction.transaction,\n          maxFeePerGas,\n          maxPriorityFeePerGas,\n        };\n        // call confirmExternalTransaction\n        const originalTxMeta = {\n          ...smartTransaction,\n          id: smartTransaction.uuid,\n          status: TransactionStatus.confirmed,\n          transactionHash: txHash,\n          transaction: updatedTxParams,\n        };\n        // create txMeta snapshot for history\n        const snapshot = snapshotFromTxMeta(originalTxMeta);\n        // recover previous tx state obj\n        const previousState = replayHistory(originalTxMeta.history);\n        // generate history entry and add to history\n        const entry = generateHistoryEntry(\n          previousState,\n          snapshot,\n          'txStateManager: setting status to confirmed',\n        );\n        const txMeta =\n          entry.length > 0\n            ? {\n                ...originalTxMeta,\n                history: originalTxMeta.history.concat(entry),\n              }\n            : originalTxMeta;\n\n        if (this.#doesTransactionNeedConfirmation(txHash)) {\n          this.confirmExternalTransaction(\n            txMeta,\n            transactionReceipt,\n            baseFeePerGas,\n          );\n        }\n\n        this.trackMetaMetricsEvent({\n          event: MetaMetricsEventName.StxConfirmed,\n          category: MetaMetricsEventCategory.Transactions,\n        });\n\n        this.#updateSmartTransaction(\n          {\n            ...smartTransaction,\n            confirmed: true,\n          },\n          { chainId, ethQuery },\n        );\n      }\n    } catch (error) {\n      this.trackMetaMetricsEvent({\n        event: MetaMetricsEventName.StxConfirmationFailed,\n        category: MetaMetricsEventCategory.Transactions,\n      });\n      console.error('confirm error', error);\n    }\n  }\n\n  // ! Ask backend API to accept list of uuids as params\n  async fetchSmartTransactionsStatus(\n    uuids: string[],\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ): Promise<Record<string, SmartTransactionsStatus>> {\n    const params = new URLSearchParams({\n      uuids: uuids.join(','),\n    });\n    const chainId = this.#getChainId({ networkClientId });\n    const ethQuery = this.#getEthQuery({ networkClientId });\n    const url = `${getAPIRequestURL(\n      APIType.BATCH_STATUS,\n      chainId,\n    )}?${params.toString()}`;\n\n    const data = (await this.fetch(url)) as Record<\n      string,\n      SmartTransactionsStatus\n    >;\n\n    Object.entries(data).forEach(([uuid, stxStatus]) => {\n      const smartTransaction = {\n        statusMetadata: stxStatus,\n        status: calculateStatus(stxStatus),\n        cancellable: isSmartTransactionCancellable(stxStatus),\n        uuid,\n      };\n      this.#updateSmartTransaction(smartTransaction, { chainId, ethQuery });\n    });\n\n    return data;\n  }\n\n  async addNonceToTransaction(\n    transaction: UnsignedTransaction,\n  ): Promise<UnsignedTransaction> {\n    const nonceLock = await this.getNonceLock(transaction.from);\n    const nonce = nonceLock.nextNonce;\n    nonceLock.releaseLock();\n    return {\n      ...transaction,\n      nonce: `0x${nonce.toString(16)}`,\n    };\n  }\n\n  clearFees(): Fees {\n    const fees = {\n      approvalTxFees: undefined,\n      tradeTxFees: undefined,\n    };\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        fees,\n      },\n    });\n    return fees;\n  }\n\n  async getFees(\n    tradeTx: UnsignedTransaction,\n    approvalTx?: UnsignedTransaction,\n    { networkClientId }: { networkClientId?: NetworkClientId } = {},\n  ): Promise<Fees> {\n    const chainId = this.#getChainId({ networkClientId });\n    const transactions = [];\n    let unsignedTradeTransactionWithNonce;\n    if (approvalTx) {\n      const unsignedApprovalTransactionWithNonce =\n        await this.addNonceToTransaction(approvalTx);\n      transactions.push(unsignedApprovalTransactionWithNonce);\n      unsignedTradeTransactionWithNonce = {\n        ...tradeTx,\n        // If there is an approval tx, the trade tx's nonce is increased by 1.\n        nonce: incrementNonceInHex(unsignedApprovalTransactionWithNonce.nonce),\n      };\n    } else if (tradeTx.nonce) {\n      unsignedTradeTransactionWithNonce = tradeTx;\n    } else {\n      unsignedTradeTransactionWithNonce = await this.addNonceToTransaction(\n        tradeTx,\n      );\n    }\n    transactions.push(unsignedTradeTransactionWithNonce);\n    const data = await this.fetch(getAPIRequestURL(APIType.GET_FEES, chainId), {\n      method: 'POST',\n      body: JSON.stringify({\n        txs: transactions,\n      }),\n    });\n    let approvalTxFees;\n    let tradeTxFees;\n    if (approvalTx) {\n      approvalTxFees = data?.txs[0];\n      tradeTxFees = data?.txs[1];\n    } else {\n      tradeTxFees = data?.txs[0];\n    }\n\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        ...(chainId === this.config.chainId && {\n          fees: {\n            approvalTxFees,\n            tradeTxFees,\n          },\n        }),\n        feesByChainId: {\n          ...this.state.smartTransactionsState.feesByChainId,\n          [chainId]: {\n            approvalTxFees,\n            tradeTxFees,\n          },\n        },\n      },\n    });\n\n    return {\n      approvalTxFees,\n      tradeTxFees,\n    };\n  }\n\n  // * After this successful call client must add a nonce representative to\n  // * transaction controller external transactions list\n  async submitSignedTransactions({\n    transactionMeta,\n    transaction,\n    signedTransactions,\n    signedCanceledTransactions,\n    networkClientId,\n  }: {\n    signedTransactions: SignedTransaction[];\n    signedCanceledTransactions: SignedCanceledTransaction[];\n    transactionMeta?: any;\n    transaction?: any;\n    networkClientId?: NetworkClientId;\n  }) {\n    const chainId = this.#getChainId({ networkClientId });\n    const ethQuery = this.#getEthQuery({ networkClientId });\n    const data = await this.fetch(\n      getAPIRequestURL(APIType.SUBMIT_TRANSACTIONS, chainId),\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          rawTxs: signedTransactions,\n          rawCancelTxs: signedCanceledTransactions,\n        }),\n      },\n    );\n    const time = Date.now();\n    let preTxBalance;\n    try {\n      const preTxBalanceBN = await query(ethQuery, 'getBalance', [\n        transaction?.from,\n      ]);\n      preTxBalance = new BigNumber(preTxBalanceBN).toString(16);\n    } catch (error) {\n      console.error('provider error', error);\n    }\n\n    const requiresNonce = !transaction.nonce;\n    let nonce;\n    let nonceLock;\n    let nonceDetails = {};\n\n    if (requiresNonce) {\n      nonceLock = await this.getNonceLock(transaction?.from);\n      nonce = hexlify(nonceLock.nextNonce);\n      nonceDetails = nonceLock.nonceDetails;\n      if (transaction) {\n        transaction.nonce ??= nonce;\n      }\n    }\n    const submitTransactionResponse = {\n      ...data,\n      txHash: getTxHash(signedTransactions[0]),\n    };\n\n    try {\n      this.#updateSmartTransaction(\n        {\n          chainId,\n          nonceDetails,\n          preTxBalance,\n          status: SmartTransactionStatuses.PENDING,\n          time,\n          transaction,\n          uuid: submitTransactionResponse.uuid,\n          transactionHash: submitTransactionResponse.txHash,\n          cancellable: true,\n          type: transactionMeta?.type || 'swap',\n        },\n        { chainId, ethQuery },\n      );\n    } finally {\n      nonceLock?.releaseLock();\n    }\n\n    return submitTransactionResponse;\n  }\n\n  #getChainId({\n    networkClientId,\n  }: { networkClientId?: NetworkClientId } = {}): Hex {\n    return networkClientId\n      ? this.getNetworkClientById(networkClientId).configuration.chainId\n      : this.config.chainId;\n  }\n\n  #getEthQuery({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  } = {}): EthQuery {\n    if (networkClientId) {\n      return new EthQuery(this.getNetworkClientById(networkClientId).provider);\n    }\n\n    if (this.ethQuery === undefined) {\n      throw new Error(ETH_QUERY_ERROR_MSG);\n    }\n\n    return this.ethQuery;\n  }\n\n  // TODO: This should return if the cancellation was on chain or not (for nonce management)\n  // After this successful call client must update nonce representative\n  // in transaction controller external transactions list\n  async cancelSmartTransaction(\n    uuid: string,\n    {\n      networkClientId,\n    }: {\n      networkClientId?: NetworkClientId;\n    } = {},\n  ): Promise<void> {\n    const chainId = this.#getChainId({ networkClientId });\n    await this.fetch(getAPIRequestURL(APIType.CANCEL, chainId), {\n      method: 'POST',\n      body: JSON.stringify({ uuid }),\n    });\n  }\n\n  async fetchLiveness({\n    networkClientId,\n  }: {\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<boolean> {\n    const chainId = this.#getChainId({ networkClientId });\n    let liveness = false;\n    try {\n      const response = await this.fetch(\n        getAPIRequestURL(APIType.LIVENESS, chainId),\n      );\n      liveness = Boolean(response.lastBlock);\n    } catch (error) {\n      console.log('\"fetchLiveness\" API call failed');\n    }\n\n    this.update({\n      smartTransactionsState: {\n        ...this.state.smartTransactionsState,\n        ...(chainId === this.config.chainId && { liveness }),\n        livenessByChainId: {\n          ...this.state.smartTransactionsState.livenessByChainId,\n          [chainId]: liveness,\n        },\n      },\n    });\n\n    return liveness;\n  }\n\n  async setStatusRefreshInterval(interval: number): Promise<void> {\n    if (interval !== this.config.interval) {\n      this.configure({ interval }, false, false);\n    }\n  }\n\n  getTransactions({\n    addressFrom,\n    status,\n  }: {\n    addressFrom: string;\n    status: SmartTransactionStatuses;\n  }): SmartTransaction[] {\n    const { smartTransactions } = this.state.smartTransactionsState;\n    const { chainId } = this.config;\n    const currentSmartTransactions = smartTransactions?.[chainId];\n    if (!currentSmartTransactions || currentSmartTransactions.length === 0) {\n      return [];\n    }\n\n    return currentSmartTransactions.filter((stx) => {\n      return stx.status === status && stx.transaction?.from === addressFrom;\n    });\n  }\n}\n"]}