{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";AAAA,UAAU;;;AAEV,IAAY,OAOX;AAPD,WAAY,OAAO;IACjB,6CAAU,CAAA;IACV,qDAAc,CAAA;IACd,mEAAqB,CAAA;IACrB,yCAAQ,CAAA;IACR,qDAAc,CAAA;IACd,6CAAU,CAAA;AACZ,CAAC,EAPW,OAAO,GAAP,eAAO,KAAP,eAAO,QAOlB;AAED,wBAAwB;AAExB,IAAY,uBAMX;AAND,WAAY,uBAAuB;IACjC,kDAAuB,CAAA;IACvB,8CAAmB,CAAA;IACnB,kDAAuB,CAAA;IACvB,gDAAqB,CAAA;IACrB,8CAAmB,CAAA;AACrB,CAAC,EANW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAMlC;AAED,IAAY,kCAOX;AAPD,WAAY,kCAAkC;IAC5C,mEAA6B,CAAA;IAC7B,6DAAuB,CAAA;IACvB,yEAAmC,CAAA;IACnC,qEAA+B,CAAA;IAC/B,uEAAiC,CAAA;IACjC,qEAA+B,CAAA;AACjC,CAAC,EAPW,kCAAkC,GAAlC,0CAAkC,KAAlC,0CAAkC,QAO7C;AAED,IAAY,wBAWX;AAXD,WAAY,wBAAwB;IAClC,+CAAmB,CAAA;IACnB,+CAAmB,CAAA;IACnB,iDAAqB,CAAA;IACrB,+CAAmB,CAAA;IACnB,6EAAiD,CAAA;IACjD,uEAA2C,CAAA;IAC3C,mFAAuD,CAAA;IACvD,+EAAmD,CAAA;IACnD,iFAAqD,CAAA;IACrD,iDAAqB,CAAA;AACvB,CAAC,EAXW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAWnC;AAEY,QAAA,6BAA6B,GAAG;IAC3C,CAAC,kCAAkC,CAAC,YAAY,CAAC,EAC/C,wBAAwB,CAAC,sBAAsB;IACjD,CAAC,kCAAkC,CAAC,SAAS,CAAC,EAC5C,wBAAwB,CAAC,mBAAmB;IAC9C,CAAC,kCAAkC,CAAC,eAAe,CAAC,EAClD,wBAAwB,CAAC,yBAAyB;IACpD,CAAC,kCAAkC,CAAC,aAAa,CAAC,EAChD,wBAAwB,CAAC,uBAAuB;IAClD,CAAC,kCAAkC,CAAC,cAAc,CAAC,EACjD,wBAAwB,CAAC,wBAAwB;CACpD,CAAC","sourcesContent":["/** API */\n\nexport enum APIType {\n  'GET_FEES',\n  'ESTIMATE_GAS',\n  'SUBMIT_TRANSACTIONS',\n  'CANCEL',\n  'BATCH_STATUS',\n  'LIVENESS',\n}\n\n/** SmartTransactions */\n\nexport enum SmartTransactionMinedTx {\n  NOT_MINED = 'not_mined',\n  SUCCESS = 'success',\n  CANCELLED = 'cancelled',\n  REVERTED = 'reverted',\n  UNKNOWN = 'unknown',\n}\n\nexport enum SmartTransactionCancellationReason {\n  WOULD_REVERT = 'would_revert',\n  TOO_CHEAP = 'too_cheap',\n  DEADLINE_MISSED = 'deadline_missed',\n  INVALID_NONCE = 'invalid_nonce',\n  USER_CANCELLED = 'user_cancelled',\n  NOT_CANCELLED = 'not_cancelled',\n}\n\nexport enum SmartTransactionStatuses {\n  PENDING = 'pending',\n  SUCCESS = 'success',\n  REVERTED = 'reverted',\n  UNKNOWN = 'unknown',\n  CANCELLED_WOULD_REVERT = 'cancelled_would_revert',\n  CANCELLED_TOO_CHEAP = 'cancelled_too_cheap',\n  CANCELLED_DEADLINE_MISSED = 'cancelled_deadline_missed',\n  CANCELLED_INVALID_NONCE = 'cancelled_invalid_nonce',\n  CANCELLED_USER_CANCELLED = 'cancelled_user_cancelled',\n  RESOLVED = 'resolved',\n}\n\nexport const cancellationReasonToStatusMap = {\n  [SmartTransactionCancellationReason.WOULD_REVERT]:\n    SmartTransactionStatuses.CANCELLED_WOULD_REVERT,\n  [SmartTransactionCancellationReason.TOO_CHEAP]:\n    SmartTransactionStatuses.CANCELLED_TOO_CHEAP,\n  [SmartTransactionCancellationReason.DEADLINE_MISSED]:\n    SmartTransactionStatuses.CANCELLED_DEADLINE_MISSED,\n  [SmartTransactionCancellationReason.INVALID_NONCE]:\n    SmartTransactionStatuses.CANCELLED_INVALID_NONCE,\n  [SmartTransactionCancellationReason.USER_CANCELLED]:\n    SmartTransactionStatuses.CANCELLED_USER_CANCELLED,\n};\n\nexport interface SmartTransactionsStatus {\n  error?: string;\n  cancellationFeeWei: number;\n  cancellationReason?: SmartTransactionCancellationReason;\n  deadlineRatio: number;\n  minedHash: string | undefined;\n  minedTx: SmartTransactionMinedTx;\n}\n\nexport interface SmartTransaction {\n  uuid: string;\n  chainId?: string;\n  destinationTokenAddress?: string;\n  destinationTokenDecimals?: string;\n  destinationTokenSymbol?: string;\n  history?: any;\n  metamaskNetworkId?: string;\n  nonceDetails?: any;\n  origin?: string;\n  preTxBalance?: string;\n  status?: string;\n  statusMetadata?: SmartTransactionsStatus;\n  sourceTokenSymbol?: string;\n  swapMetaData?: any;\n  swapTokenValue?: string;\n  time?: number;\n  txParams?: any;\n  type?: string;\n  confirmed?: boolean;\n  cancellable?: boolean;\n}\n\nexport interface Fee {\n  maxFeePerGas: number;\n  maxPriorityFeePerGas: number;\n}\n\nexport interface Fees {\n  fees: Fee[];\n  cancelFees: Fee[];\n  feeEstimate: number;\n  gasLimit: number;\n  gasUsed: number;\n}\n\nexport interface EstimatedGas {\n  gasUsed: number;\n  gasLimit: number;\n  feeEstimate: number;\n}\n\n// TODO: maybe grab the type from transactions controller?\nexport type UnsignedTransaction = any;\n\n// TODO\nexport type SignedTransaction = any;\n\n// TODO\nexport type SignedCanceledTransaction = any;\n"]}