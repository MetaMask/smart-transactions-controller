{"version":3,"file":"test-helpers.js","sourceRoot":"","sources":["../src/test-helpers.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACI,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;AAChE,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB;AAEF;;;;;;;;;;;GAWG;AACI,KAAK,UAAU,WAAW,CAAC,EAChC,KAAK,EACL,QAAQ,EACR,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,GAKpC;IACC,GAAG;QACD,MAAM,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAChC,MAAM,IAAA,qBAAa,GAAE,CAAC;QACtB,6CAA6C;QAC7C,QAAQ,IAAI,QAAQ,CAAC;KACtB,QAAQ,QAAQ,GAAG,CAAC,EAAE;AACzB,CAAC;AAfD,kCAeC","sourcesContent":["/**\n * Resolve all pending promises.\n * This method is used for async tests that use fake timers.\n * See https://stackoverflow.com/a/58716087 and https://jestjs.io/docs/timer-mocks.\n */\nexport const flushPromises = () => {\n  return new Promise(jest.requireActual('timers').setImmediate);\n};\n\n/**\n * Advances the provided fake timer by a specified duration in incremental steps.\n * Between each step, any enqueued promises are processed. Fake timers in testing libraries\n * allow simulation of time without actually waiting. However, they don't always account for\n * promises or other asynchronous operations that may get enqueued during the timer's duration.\n * By advancing time in incremental steps and flushing promises between each step,\n * this function ensures that both timers and promises are comprehensively processed.\n * @param options - The options object.\n * @param options.clock - The Sinon fake timer instance used to manipulate time in tests.\n * @param options.duration - The total amount of time (in milliseconds) to advance the timer by.\n * @param options.stepSize - The incremental step size (in milliseconds) by which the timer is advanced in each iteration. Default is 1/4 of the duration.\n */\nexport async function advanceTime({\n  clock,\n  duration,\n  stepSize = Math.floor(duration / 4),\n}: {\n  clock: sinon.SinonFakeTimers;\n  duration: number;\n  stepSize?: number;\n}): Promise<void> {\n  do {\n    await clock.tickAsync(stepSize);\n    await flushPromises();\n    // eslint-disable-next-line no-param-reassign\n    duration -= stepSize;\n  } while (duration > 0);\n}\n"]}